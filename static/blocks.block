    *

// app blocks blockfile

// custom blocks
!break
    init
        {
            return Block('span').add('br');
        }
    load
        {
            data('val', val => {
                for (var i = 1; i < val; i++)
                    block.add('br');
            });
        }
!text
    init
        {
            return Block('span');
        }
    load
        {
            data('val', val => {
                block.node().appendChild(document.createTextNode(val));
            });
            data('html', html => {
                block.html(html);
            });
        }
!image
    init
        {
            return Block('div');
        }
    load
        {
            var src = data('src');
            var height = data('height');
            var width = data('width');
            var alt = data('alt');
            if (src != null) {
                block.css('background-image', "url('" + src + "')")
                    .css('background-repeat', 'no-repeat')
                    .css('background-size', 'contain')
                ;
            }
            if (height !== null) block.css('height', height);
            if (width !== null) block.css('width', width);
            if (alt !== null) block.attribute('title', alt);
        }
!switch
    init
        {
            var block;
            block = Block('div')
                .key('state', false)
                .css({
                    width: 'auto',
                    height: '30px',
                    cursor: 'pointer',
                    margin: '5px 10px',
                    fontSize: '17px'
                })
                .add(Block('block', 'label')
                    .css({
                        width: 'auto',
                        minWidth: '70px',
                        float: 'left',
                        marginRight: '10px',
                        cursor: 'inherit',
                        fontSize: 'inherit',
                        display: 'none'
                    })
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .add(Block('text', 1)
                        .data('Label 1: ')
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .add(Block('div', 'main')
                    .css({
                        width: '65px',
                        height: '100%',
                        position: 'relative',
                        cursor: 'inherit',
                        display: 'inline-block'
                    })
                    .add(Block('div', 'bg')
                        .css({
                            width: '100%',
                            height: '100%',
                            borderRadius: '16px',
                            backgroundColor: '#e4e4e4',
                            position: 'absolute',
                            top: '0',
                            left: '0',
                            zIndex: '1',
                            transition: 'background-color 0.2s ease-in-out'
                        })
                    )
                    .add(Block('block', 'circle')
                        .css({
                            width: '30px',
                            height: '100%',
                            position: 'absolute',
                            top: '0.5px',
                            left: '1px',
                            zIndex: '2',
                            transition: 'left 0.2s ease-in-out'
                        })
                        .add(Block('div')
                            .css({
                                width: '75%',
                                height: '75%',
                                borderRadius: '100%',
                                backgroundColor: 'white',
                                margin: '0 auto'
                            })
                        )
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .on('updateUI', (e, b, d) => {
                    if (block.key('state')) {
                        block.child('main/circle').css({
                            left: '34px'
                        }).sibling('bg').css({
                            backgroundColor: '#558fed'
                        });
                    } else {
                        block.child('main/circle').css({
                            left: '1px',
                        }).sibling('bg').css({
                            backgroundColor: '#e4e4e4'
                        });
                    }
                })
                .on('modified', (e, b, d) => {
                    block.on('updateUI');
                })
                .key('enabled', true)
                .on('enable', (e, b, d) => {
                    block.key('enabled', true);
                    block.css({
                        opacity: '1',
                        cursor: 'pointer'
                    });
                    e.stopPropagation();
                })
                .on('disable', (e, b, d) => {
                    block.key('enabled', false);
                    block.css({
                        opacity: '0.6',
                        cursor: 'default'
                    });
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('val', (val) => {
                var v = (val == 'on');
                if (block.key('state') != v) {
                    block.key('state', v);
                    block.on('modified', { locked: true });
                }
            });
            data('label', (label) => {
                block.child('label/text').html('').data(label);
                block.child('label').css('display', 'inline-table');
            });
        }

// app-specific blocks
!project-item
    init
        {
            var block = Block('div');
            var _block = block;
            block
                .css({
                    width: '400px',
                    height: '280px',
                    borderRadius: '7px',
                    backgroundColor: 'white',
                    '-webkit-box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    'box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    display: 'inline-block',
                    margin: '5px 10px 15px 10px',
                    textAlign: 'left',
                    boxSizing: 'border-box',
                    padding: '20px 22px 20px 26px',
                    position: 'relative'
                })
                .add(Block('div', 'bg')
                    .css({
                        position: 'absolute',
                        top: '0',
                        left: '0',
                        width: '100%',
                        height: '100%',
                        zIndex: '0',
                        background: 'url(/img/gear_bg.jpg) no-repeat center center',
                        backgroundSize: 'cover',
                        boxSizing: 'border-box',
                        borderRadius: '7px',
                        opacity: '0.025',
                        backgroundColor: 'white'
                    })
                )
                .add(Block('div', 'menu_top')
                    .css({
                        top: '21px',
                        right: '23px',
                        width: '105px',
                        height: '40px',
                        position: 'absolute',
                        zIndex: '100'
                    })
                    .add(Block('block', 'button_left')
                        .css({
                            position: 'absolute',
                            left: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '1');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var repo = _block.key('repo');
                                        if (repo != null && repo != '' && repo.trim() != '') {
                                            b.child('a').data({ href: `${repo.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/code_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_middle')
                        .css({
                            position: 'absolute',
                            left: '35px',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '27px',
                                width: '27px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '27px',
                                    width: '27px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var link = _block.key('link');
                                        if (link != null && link != '' && link.trim() != '') {
                                            b.child('a').data({ href: `${link.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '27px',
                                        width: '27px',
                                        src: '/img/public_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_right')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('enable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        b.css('opacity', '0.9');
                                        if (_block.key('featured') === false) {
                                            b.child('image').data({
                                                src: '/img/bookmark_new_b.png'
                                            });
                                        }
                                    }
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                    if (_block.key('featured') === false) {
                                        b.child('image').data({
                                            src: '/img/bookmark_ol_b.png'
                                        });
                                    } else {
                                        b.child('image').data({
                                            src: '/img/bookmark_b.png'
                                        });
                                    }
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        app.ws.api.star_project(_block.key('id'));
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/bookmark_ol_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'menu_extra')
                    .css({
                        top: '20px',
                        right: '130px',
                        width: '35px',
                        height: '40px',
                        position: 'absolute',
                        display: 'none'
                    })
                    .add(Block('block', 'button_leftmost')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '23px',
                                width: '23px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '23px',
                                    width: '23px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        console.log('code');
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '23px',
                                        width: '23px',
                                        src: '/img/launch_b.png',
                                        css: {
                                            backgroundColor: 'white'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'spacer0')
                    .css({
                        height: '10px'
                    })
                )
                .add(Block('div', 'name')
                    .css({
                        fontSize: '26px',
                        fontWeight: '500',
                        opacity: '0.95'
                    })
                    .add(Block('text', 1)
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer1')
                    .css({
                        height: '20px'
                    })
                )
                .add(Block('div', 'description')
                    .css({
                        fontSize: '17px',
                        fontWeight: '400',
                        margin: '10px 2px 5px 5px',
                        opacity: '0.9'
                    })
                    .add(Block('text', 1)
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer2')
                    .css({
                        height: '5px'
                    })
                )
                .add(Block('div', 'project_content')
                    .css({
                        maxHeight: '120px',
                        height: '100%',
                        width: '99%'
                    })
                    .add(Block('block', 'content')
                        .add(Block('div', 'mdl_button_container')
                            .css({
                                height: '50px',
                                width: '150px',
                                margin: '0 auto',
                            })
                            .add(Block('button', 1)
                                .class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect')
                                .html('Manage')
                                .css({
                                    backgroundColor: app.ui.colors.primary,
                                    color: 'white',
                                    letterSpacing: '2.5px',
                                    fontSize: '11.5px',
                                    paddingLeft: '25px',
                                    paddingRight: '25px',
                                    opacity: '1',
                                    transition: 'opacity 0.2s ease'
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.8');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '1');
                                })
                            )
                        )
                    )
                )
                .add(Block('div', 'created_year')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        right: '30px',
                        width: '40px',
                        height: '20px',
                        fontSize: '19px',
                        opacity: '0.9'
                    })
                    .add(Block('text', 1)
                        .data(`${(new Date()).getFullYear()}`)
                    )
                )
                .add(Block('div', 'last_updated_msg')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        left: '30px',
                        width: '100px',
                        height: '20px',
                        fontSize: '14px',
                        opacity: '0.85'
                    })
                    .add(Block('text', 1)
                        .data('Some time ago')
                    )
                )
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
            });
            data('name', (name) => {
                block.key('name', name.toString());
                block.child('name/text').html('').data(name);
            });
            data('description', (description) => {
                block.key('description', description.toString());
                block.child('description/text').html('').data(description);
            });
            data('featured', featured => {
                block.key('featured', featured);
                var img = '/img/bookmark';
                if (featured) {
                    img += '_b.png';
                } else {
                    img += '_ol_b.png';
                }
                block.child('menu_top/button_right/button_wrap/button/image').data({ src: img });
            });
            data('public', public => {
                var img_src = '/img/public' + (public === true ? '' : '_off') + '_b.png';
                block.child('menu_top/button_middle/button_wrap/button/image').data({
                    src: img_src
                });
            });
            data('link', link => {
                block.key('link', link);
                block.child('menu_top/button_middle/button_wrap/button').on('enable');
            });
            data('repo', repo => {
                block.key('repo', repo);
                block.child('menu_top/button_left/button_wrap/button').on('enable');
            });
            data('ts_created', ts_created => {
                block.key('ts_created', ts_created);
                block.child('created_year/text').html('').data(`${(new Date(ts_created)).getFullYear()}`);
            });
            data('ts_updated', ts_updated => {
                block.key('ts_updated', ts_updated);
                block.child('last_updated_msg/text').html('').data(`${util.capitalize(util.duration_desc(ts_updated))}`);
            });
            data('img', img => {
                block.key('img', img);
                console.log(img);
                block.child('bg').css('background-image', `url(${img.trim()})`);
            });
        }