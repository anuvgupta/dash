    *

// app blocks blockfile

// custom blocks
!break
    init
        {
            return Block('span').add('br');
        }
    load
        {
            data('val', val => {
                for (var i = 1; i < val; i++)
                    block.add('br');
            });
        }
!text
    init
        {
            return Block('span');
        }
    load
        {
            data('val', val => {
                block.node().appendChild(document.createTextNode(val));
            });
            data('html', html => {
                block.html(html);
            });
        }
!image
    init
        {
            return Block('div');
        }
    load
        {
            var src = data('src');
            var height = data('height');
            var width = data('width');
            var alt = data('alt');
            if (src != null) {
                block.css('background-image', "url('" + src + "')")
                    .css('background-repeat', 'no-repeat')
                    .css('background-size', 'contain')
                ;
            }
            if (height !== null) block.css('height', height);
            if (width !== null) block.css('width', width);
            if (alt !== null) block.attribute('title', alt);
        }
!switch
    init
        {
            var block;
            block = Block('div')
                .key('state', false)
                .css({
                    width: 'auto',
                    height: '30px',
                    cursor: 'pointer',
                    margin: '5px 10px',
                    fontSize: '17px',
                })
                .add(Block('block', 'label')
                    .css({
                        width: 'auto',
                        minWidth: '70px',
                        float: 'left',
                        marginRight: '10px',
                        cursor: 'inherit',
                        fontSize: 'inherit',
                        display: 'none'
                    })
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .add(Block('text', 1)
                        .data('Label 1: ')
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .add(Block('div', 'main')
                    .css({
                        width: '65px',
                        height: '100%',
                        position: 'relative',
                        cursor: 'inherit',
                        display: 'inline-block'
                    })
                    .add(Block('div', 'bg')
                        .css({
                            width: '100%',
                            height: '100%',
                            borderRadius: '16px',
                            backgroundColor: '#e4e4e4',
                            position: 'absolute',
                            top: '0',
                            left: '0',
                            zIndex: '1',
                            transition: 'background-color 0.2s ease-in-out'
                        })
                    )
                    .add(Block('block', 'circle')
                        .css({
                            width: '30px',
                            height: '100%',
                            position: 'absolute',
                            top: '0.25px', // 0.5px
                            left: '1px',
                            zIndex: '2',
                            transition: 'left 0.2s ease-in-out'
                        })
                        .add(Block('div')
                            .css({
                                width: '75%',
                                height: '75%',
                                borderRadius: '100%',
                                backgroundColor: 'white',
                                margin: '0 auto'
                            })
                        )
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .on('updateUI', (e, b, d) => {
                    if (block.key('state')) {
                        block.child('main/circle').css({
                            left: '34px'
                        }).sibling('bg').css({
                            backgroundColor: '#558fed'
                        });
                    } else {
                        block.child('main/circle').css({
                            left: '1px',
                        }).sibling('bg').css({
                            backgroundColor: '#e4e4e4'
                        });
                    }
                })
                .on('modified', (e, b, d) => {
                    block.on('updateUI');
                })
                .key('enabled', true)
                .on('enable', (e, b, d) => {
                    block.key('enabled', true);
                    block.css({
                        opacity: '1',
                        cursor: 'pointer'
                    });
                    e.stopPropagation();
                })
                .on('disable', (e, b, d) => {
                    block.key('enabled', false);
                    block.css({
                        opacity: '0.6',
                        cursor: 'default'
                    });
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('val', (val) => {
                var v = (val == 'on');
                if (block.key('state') != v) {
                    block.key('state', v);
                    block.on('modified', { locked: true });
                }
            });
            data('label', (label) => {
                block.child('label/text').html('').data(label);
                block.child('label').css('display', 'inline-table');
            });
        }

// app-specific blocks
!menu-item
    init
        {
            var block;
            block = Block("div")
                .key('select', '0')
                .css({
                    width: '100%',
                    height: '70px',
                    borderBottom: '1px solid #f0f0f0',
                    backgroundColor: 'white',
                    transition: 'background-color 0.15s ease',
                    cursor: 'pointer',
                    position: 'relative',
                    zIndex: '10'
                })
                .on('mouseover', (e, b, d) => {
                    if (b.key('select') == '0')
                        b.css('background-color', '#f8f8f8');
                })
                .on('mouseout', (e, b, d) => {
                    if (b.key('select') == '0')
                        b.css('background-color', 'white');
                })
                .on('select', (e, b, d) => {
                    if (b.key('select') == '1') {
                        b.on('second_click');
                    }
                    b.key('select', '1');
                    b.css('background-color', '#f2f2f2');
                    b.parent().sibling('content').child('' + b.mark()).on('show');
                })
                .on('deselect', (e, b, d) => {
                    b.key('select', '0');
                    b.css('background-color', 'white');
                    b.parent().sibling('content').child('' + b.mark()).on('hide');
                })
                .on('click', (e, b, d) => {
                    var siblings = b.parent().children();
                    for (var s in siblings) {
                        if (siblings.hasOwnProperty(s) && s != b.mark())
                            siblings[s].on('deselect');
                    }
                    b.on('select');
                })
                .add(Block('block', 'img')
                    .css({
                        width: '80px',
                        float: 'left'
                    })
                    .add(Block('image', 1)
                        .data({
                            src: 'img/gear_b.png',
                            height: '27px',
                            width: '27px'
                        })
                        .css({
                            margin: '0 auto',
                            opacity: '0.7'
                        })
                    )
                )
                .add(Block('block', 'txt')
                    .css({
                        width: 'auto',
                        float: 'left'
                    })
                    .add(Block('text', 1)
                        .data("Title")
                        .css({
                            fontSize: '22px',
                            fontWeight: '300',
                            color: '#222',
                            marginLeft: '-3px'
                        })
                    )
                )
            ;
            return block;
        }
    load
        {
            data('val', val => {
                block.child('txt/text').html('').data(`${val}`);
            });
            data('icon', icon => {
                if (icon == "temp")
                    icon = "gear_b.png";
                block.child('img/image').data({
                    src: `img/${icon}`
                });
            });
            data('icon_size', icon_size => {
                block.child('img/image').data({
                    height: icon_size,
                    width: icon_size
                });
            });
        }
!edit-button
    init
        {
            return Block('div')
                .key('showing', 'off')
                .class('value_edit_button_hidden')
                .css({
                    height: '20px',
                    width: '25px',
                    display: 'inline-block',
                    transition: 'opacity 0.2s ease',
                    cursor: 'pointer',
                })
                .add(Block('image', 'img')
                    .data({
                        src: '/img/edit_b.png',
                        height: '18px',
                        width: '18px',
                    })
                )
                .on('show', (e, b, d) => {
                    b.key('showing', 'on');
                    b.node().classList.remove('value_edit_button_hidden');
                    b.class('value_edit_button');
                    e.stopPropagation();
                })
                .on('hide', (e, b, d) => {
                    b.key('showing', 'off');
                    b.node().classList.remove('value_edit_button');
                    b.class('value_edit_button_hidden');
                    e.stopPropagation();
                })
            ;
        }
    load
        {

        }
!project-item
    init
        {
            var block = Block('div');
            var _block = block;
            block
                .css({
                    width: '400px',
                    height: '280px',
                    borderRadius: '7px',
                    backgroundColor: 'white',
                    '-webkit-box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    'box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    display: 'inline-block',
                    margin: '5px 12px 20px 12px',
                    textAlign: 'left',
                    boxSizing: 'border-box',
                    padding: '20px 22px 20px 32px',
                    position: 'relative',
                    verticalAlign: 'top'
                })
                .add(Block('div', 'bg')
                    .css({
                        position: 'absolute',
                        top: '0',
                        left: '0',
                        width: '100%',
                        height: '100%',
                        zIndex: '0',
                        background: 'url(/img/gear_bg.jpg) no-repeat center center',
                        backgroundSize: 'cover',
                        boxSizing: 'border-box',
                        borderRadius: '7px',
                        opacity: '0.03',
                        //filter:'invert()',
                        backgroundColor: 'white'
                    })
                )
                .add(Block('div', 'menu_top')
                    .css({
                        top: '21px',
                        right: '23px',
                        width: '105px',
                        height: '40px',
                        position: 'absolute',
                        zIndex: '100'
                    })
                    .add(Block('block', 'button_left')
                        .css({
                            position: 'absolute',
                            left: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '1');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var repo = _block.key('repo');
                                        if (repo != null && repo != '' && repo.trim() != '') {
                                            b.child('a').data({ href: `${repo.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/code_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_middle')
                        .css({
                            position: 'absolute',
                            left: '35px',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '27px',
                                width: '27px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '27px',
                                    width: '27px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var link = _block.key('link');
                                        if (link != null && link != '' && link.trim() != '') {
                                            b.child('a').data({ href: `${link.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '27px',
                                        width: '27px',
                                        src: '/img/public_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_right')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('enable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        b.css('opacity', '0.9');
                                        if (_block.key('featured') === false) {
                                            b.child('image').data({
                                                src: '/img/bookmark_new_b.png'
                                            });
                                        }
                                    }
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                    if (_block.key('featured') === false) {
                                        b.child('image').data({
                                            src: '/img/bookmark_ol_b.png'
                                        });
                                    } else {
                                        b.child('image').data({
                                            src: '/img/bookmark_b.png'
                                        });
                                    }
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        app.ws.api.star_project(_block.key('id'));
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/bookmark_ol_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'menu_extra')
                    .css({
                        top: '20px',
                        right: '130px',
                        width: '35px',
                        height: '40px',
                        position: 'absolute',
                        display: 'none'
                    })
                    .add(Block('block', 'button_leftmost')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '23px',
                                width: '23px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '23px',
                                    width: '23px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        //console.log('code');
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '23px',
                                        width: '23px',
                                        src: '/img/launch_b.png',
                                        css: {
                                            backgroundColor: 'white'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'spacer0')
                    .css({
                        height: '8px'
                    })
                )
                .add(Block('div', 'name')
                    .css({
                        fontSize: '27px',
                        fontWeight: '500',  // 600
                        opacity: '0.95',
                        letterSpacing: '1px'
                    })
                    .add(Block('text', 1)
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer1')
                    .css({
                        height: '20px'
                    })
                )
                .add(Block('div', 'description')
                    .css({
                        fontSize: '17px',
                        fontWeight: '300',
                        margin: '10px 2px 5px 5px',
                        opacity: '0.9',
                        letterSpacing: '0.5px',
                        lineHeight: '24px'
                    })
                    .add(Block('text', 'tag')
                        .data('_')
                        .css({
                            fontWeight: '500'
                        })
                    )
                    .add(Block('text', 'spacer')
                        .on('update', (e, b, d) => {
                            var tagline_exists = _block.key('tagline') && _block.key('tagline').trim().length > 0;
                            var desc_exists = _block.key('description') && _block.key('description').trim().length > 0;
                            if (tagline_exists && desc_exists) b.css('display', 'inline-block');
                            e.stopPropagation();
                        })
                        .html('&nbsp;–&nbsp;')
                        .css({
                            display: 'none'
                        })
                    )
                    .add(Block('text', 'desc')
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer2')
                    .css({
                        height: '5px'
                    })
                )
                .add(Block('div', 'project_content')
                    .class('project-content')
                    .css({
                        maxHeight: '120px',
                        height: '100%',
                        width: '99%',
                    })
                    .query('window width != 0', function (event, block, data) {
                        block.css('max-height', `calc(100% - ${3 - 3 + ((5 + block.sibling('description').$().height() + 20 + 20 + 10) + 45)}px)`);
                    })
                    .add(Block('block', 'content')
                        .add(Block('div', 'mdl_button_container')
                            .css({
                                height: '50px',
                                width: '150px',
                                margin: '0 auto',
                            })
                            .add(Block('button', 1)
                                .class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect')
                                .html('Manage')
                                .css({
                                    backgroundColor: app.ui.colors.primary,
                                    color: 'white',
                                    letterSpacing: '2.5px',
                                    fontSize: '12px',
                                    fontWeight: '500',
                                    paddingLeft: '25px',
                                    paddingRight: '25px',
                                    opacity: '1',
                                    transition: 'opacity 0.2s ease',
                                    height: '47px',
                                    outline: 'none'
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.8');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '1');
                                })
                                .on('click', (e, b, d) => {
                                    var project_metadata = null;
                                    project_metadata =  _block.key('project_metadata');
                                    if (project_metadata) {
                                        _block.parent(1).data({
                                            select_project: project_metadata
                                        });
                                    }
                                })
                            )
                        )
                    )
                )
                .add(Block('div', 'created_year')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        right: '30px',
                        width: '40px',
                        height: '20px',
                        fontSize: '19px',
                        opacity: '0.9'
                    })
                    .add(Block('text', 1)
                        .data(`${(new Date()).getFullYear()}`)
                    )
                )
                .add(Block('div', 'last_updated_msg')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        left: '33px',
                        width: '100px',
                        height: '20px',
                        fontSize: '14px',
                        opacity: '0.85'
                    })
                    .add(Block('text', 1)
                        .data('Some time ago')
                    )
                )
                .on('status_update', (e, b, d) => {
                    _block.data({
                        ts_updated: block.key('ts_updated')
                    });
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
                block.child('project_content/content/mdl_button_container/button').id(`manage_project_button_${_id.toString()}`);
            });
            data('name', (name) => {
                block.key('name', name.toString());
                block.child('name/text').html('').data(name);
            });
            data('description', (description) => {
                block.key('description', description.toString());
                block.child('description/desc').html('').data(description);
                block.child('description/spacer').on('update');
            });
            data('tagline', (tagline) => {
                block.key('tagline', tagline.toString());
                block.child('description/tag').html('').data(tagline);
                block.child('description/spacer').on('update');
            });
            data('featured', featured => {
                block.key('featured', featured);
                var img = '/img/bookmark';
                if (featured) {
                    img += '_b.png';
                } else {
                    img += '_ol_b.png';
                }
                block.child('menu_top/button_right/button_wrap/button/image').data({ src: img });
            });
            data('public', public => {
                var img_src = '/img/public' + (public === true ? '' : '_off') + '_b.png';
                block.child('menu_top/button_middle/button_wrap/button/image').data({
                    src: img_src
                });
            });
            data('link', link => {
                block.key('link', link);
                block.child('menu_top/button_middle/button_wrap/button').on(link == '' ? 'disable' : 'enable');
            });
            data('repo', repo => {
                block.key('repo', repo);
                block.child('menu_top/button_left/button_wrap/button').on(repo == '' ? 'disable' : 'enable');
            });
            data('ts_created', ts_created => {
                block.key('ts_created', ts_created);
                block.child('created_year/text').html('').data(`${(new Date(ts_created)).getFullYear()}`);
            });
            data('ts_updated', ts_updated => {
                block.key('ts_updated', ts_updated);
                block.child('last_updated_msg/text').html('').data(`${util.capitalize(util.duration_desc(ts_updated))}`);
            });
            data('img', img => {
                block.key('img', img);
                if (img.trim() != '') {
                    block.child('bg').css({
                        backgroundImage: `url(${img.trim()})`,
                        opacity: '0.04',
                    });
                }
            });
            data('img_invert', img_invert => {
                block.key('img_invert', img_invert);
                block.child('bg').css({
                    filter: img_invert == true ? 'invert()' : 'none'
                });
            });
        }
!resource-item
    init
        {
            var block = Block('div');
            var _block = block;
            block
                .css({
                    width: '390px',
                    height: '415px',
                    borderRadius: '8px',
                    backgroundColor: 'white',
                    '-webkit-box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    'box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    display: 'inline-block',
                    margin: '5px 12px 20px 12px',
                    textAlign: 'left',
                    boxSizing: 'border-box',
                    padding: '25px 32px 25px 36px',
                    position: 'relative',
                    verticalAlign: 'top'
                })
                .add(Block('div', 'bg')
                    .css({
                        position: 'absolute',
                        top: '0',
                        left: '0',
                        width: '100%',
                        height: '100%',
                        zIndex: '0',
                        background: 'url(/img/gear_bg.jpg) no-repeat center center',
                        backgroundSize: 'cover',
                        boxSizing: 'border-box',
                        borderRadius: '7px',
                        opacity: '0.02',
                        //filter:'invert()',
                        backgroundColor: 'white'
                    })
                )
                .add(Block('div', 'spacer0')
                    .css({
                        height: '8px'
                    })
                )
                .add(Block('div', 'name')
                    .css({
                        fontSize: '27px',
                        fontWeight: '500',  // 600
                        opacity: '0.95',
                        letterSpacing: '1px'
                    })
                    .add(Block('text', 1)
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer1')
                    .css({
                        height: '18px'
                    })
                )
                .add(Block('div', 'description')
                    .css({
                        fontSize: '17px',
                        fontWeight: '300',
                        margin: '7px 2px 5px 5px',
                        opacity: '0.9',
                        letterSpacing: '0.5px',
                        lineHeight: '24px'
                    })
                    .add(Block('text', 'pretag')
                        .html('_')
                        .css({
                            display: 'none',
                            fontWeight: '500'
                        })
                    )
                    .add(Block('text', 'prespacer')
                        .key('default_value', '&nbsp;–&nbsp;')
                        .html('&nbsp;–&nbsp;')
                        .on('update', (e, b, d) => {
                            //console.log('provider', _block.key('pretagline'));
                            //console.log('type', _block.key('tagline'));
                            var provider_exists = _block.key('pretagline') && _block.key('pretagline').trim().length > 0;
                            var type_exists = _block.key('tagline') && _block.key('tagline').trim().length > 0;
                            if (provider_exists && type_exists) b.html(b.key('default_value')).css('display', 'inline-block');
                            else if (provider_exists) b.html('').css('display', 'block');
                            else b.css('display', 'none')
                            e.stopPropagation();
                        })
                        .css({
                            display: 'none',
                            fontWeight: '500'
                        })
                    )
                    .add(Block('text', 'tag')
                        .data('_')
                        .css({
                            fontWeight: '500'
                        })
                    )
                    .add(Block('text', 'spacer')
                        .on('update', (e, b, d) => {
                            var tagline_exists = _block.key('tagline') && _block.key('tagline').trim().length > 0;
                            var desc_exists = _block.key('description') && _block.key('description').trim().length > 0;
                            if (tagline_exists && desc_exists) b.css('display', 'block');
                            else b.css('display', 'none')
                            e.stopPropagation();
                        })
                        //.html('&nbsp;–&nbsp;')
                        .html('')
                        .css({
                            display: 'none',
                            height: '2px'
                        })
                    )
                    .add(Block('text', 'desc')
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer2')
                    .css({
                        height: '5px'
                    })
                )
                .add(Block('div', 'status')
                    .css({
                        width: '100%',
                        height: '80px',
                        marginTop: '8px',
                        marginBottom: '7px'
                    })
                    .add(Block('block', 'light')
                        .css({
                            width: '25%',
                            height: '100%',
                            float: 'left'
                        })
                        .query('window width >= 665', function (event, block, data) {
                            block.css('width', '25%');
                        })
                        .query('window width < 665', function (event, block, data) {
                            block.css('width', '23%');
                        })
                        .add(Block('div', 'circle')
                            .css({
                                borderRadius: '100%',
                                height: '19px',
                                width: '19px',
                                backgroundColor: '#ddd',
                                border: '1px solid #eee',
                                margin: '0 0 0 auto'
                            })
                        )
                    )
                    .add(Block('div', 'labels')
                        .css({
                            width: '73%',
                            height: '100%',
                            float: 'left',
                            paddingLeft: '25px',
                            boxSizing: 'border-box'
                        })
                        .add(Block('div', 'type')
                            .css({
                                height: '50%',
                                width: '100%'
                            })
                            .add(Block('text', 1)
                                .data('Cloud Resource')
                                .css({
                                    display: 'block',
                                    textAlign: 'left',
                                    paddingTop: '17px',
                                    fontSize: '21px',
                                    color: '#222',
                                    letterSpacing: '1px'
                                })
                            )
                        )
                        .add(Block('div', 'status')
                            .css({
                                height: '50%',
                                width: '100%'
                            })
                            .add(Block('text', 1)
                                .data('Status some time ago')
                                .css({
                                    display: 'block',
                                    textAlign: 'left',
                                    fontSize: '14px',
                                    color: '#888',
                                    fontStyle: 'italic',
                                    paddingTop: '2px'
                                })
                            )
                        )
                    )
                )
                .add(Block('div', 'resource_content')
                    .class('resource-content')
                    .css({
                        maxHeight: '120px',
                        height: '100%',
                        width: '99%',
                    })
                    .query('window width != 0', function (event, block, data) {
                        block.css('max-height', `calc(100% - ${3 - 3 + ((5 + block.sibling('description').$().height() + 20 + 20 + 10) + 45 + 85 + 10 + 12 + 20)}px)`);
                    })
                    .add(Block('block', 'content')
                        .add(Block('div', 'mdl_button_container')
                            .css({
                                height: '65px',
                                width: '150px',
                                margin: '0 auto',
                            })
                            .add(Block('button', 1)
                                .class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect')
                                .html('Manage')
                                .css({
                                    backgroundColor: app.ui.colors.primary,
                                    color: 'white',
                                    letterSpacing: '2.5px',
                                    fontSize: '12px',
                                    fontWeight: '500',
                                    paddingLeft: '25px',
                                    paddingRight: '25px',
                                    opacity: '1',
                                    transition: 'opacity 0.2s ease',
                                    height: '65px',  // 42px
                                    outline: 'none'
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.8');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '1');
                                })
                                .on('click', (e, b, d) => {
                                    var resource_metadata = null;
                                    resource_metadata = _block.key('resource_metadata');
                                    if (resource_metadata) {
                                        _block.parent(1).data({
                                            select_resource: resource_metadata
                                        });
                                    }
                                })
                            )
                        )
                    )
                )
                .add(Block('div', 'created_year')
                    .css({
                        position: 'absolute',
                        bottom: '27px',
                        right: '32px',
                        width: '40px',
                        height: '20px',
                        fontSize: '19px',
                        opacity: '0.9'
                    })
                    .add(Block('text', 1)
                        .data(`${(new Date()).getFullYear()}`)
                    )
                )
                .add(Block('div', 'last_updated_msg')
                    .css({
                        position: 'absolute',
                        bottom: '27px',
                        left: '34px',
                        width: '100px',
                        height: '20px',
                        fontSize: '14px',
                        opacity: '0.85'
                    })
                    .add(Block('text', 1)
                        .data('Some time ago')
                    )
                )
                .on('status_update', (e, b, d) => {
                    var status_code = _block.key('status');
                    var status_time = _block.key('status_time');
                    var status_final_text = "Status some time ago";
                    var status_final_color = app.ui.colors.status.default;
                    if (status_code != null && status_time != null) {
                        status_final_text = status_code.charAt(0).toUpperCase() + status_code.slice(1) + " " + (status_code == "online" ? "now" : util.duration_desc(status_time));
                        status_final_color = app.ui.get_status_color(status_code);
                    }
                    _block.child('status/labels/status/text').html('').data(status_final_text);
                    _block.child('status/light/circle').css('background-color', status_final_color);
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
                block.child('resource_content/content/mdl_button_container/button').id(`manage_resource_button_${_id.toString()}`);
            });
            data('name', (name) => {
                block.key('name', name.toString());
                block.child('name/text').html('').data(name);
            });
            data('link', link => {
                block.key('link', link);
                //block.child('menu_top/button_middle/button_wrap/button').on(link == '' ? 'disable' : 'enable');
            });
            data('provider', provider => {
                block.key('provider', provider);
                var provider_string = "";
                for (var p in app.main.config.cloud.providers) {
                    var provider_arr = app.main.config.cloud.providers[p];
                    if (provider_arr[0] == provider) {
                        provider_string = `${provider_arr[1]}`;
                        break;
                    }
                }
                block.key('pretagline', `${provider_string}`);
                block.child('description/pretag').html(`${provider_string}`).css('display', 'inline-block');
                block.child('description/prespacer').on('update');
            });
            data('type', type => {
                block.key('type', type);
                var tag_string = "";
                var tag_string_long = "";
                for (var t in app.main.config.cloud.resource.types) {
                    var type_arr = app.main.config.cloud.resource.types[t];
                    if (type_arr[0] == type) {
                        tag_string = `${type_arr[1][1]}`;
                        tag_string_long = `${type_arr[1][0]}`;;
                        break;
                    }
                }
                block.key('tagline', `${tag_string_long}`);
                block.child('description/tag').html(`${tag_string_long}`);
                block.child('description/spacer').on('update');
                block.child('description/prespacer').on('update');
                if (tag_string == "") tag_string = "Resource";
                block.key('status_type', `${tag_string}`);
                block.child('status/labels/type/text').html('').data(`${tag_string}`);
            });
            data('specs', specs => {
                block.key('specs', specs);
                var desc_string = `${specs.cpu} CPU${specs.cpu == 1 ? '' : 's'} – ${specs.memory}GB RAM – ${specs.storage}GB SSD${specs.location == '' ? '' : '<br/>'}${specs.location}`;
                block.key('description', desc_string.toString());
                block.child('description/desc').html(desc_string.toString());
                block.child('description/spacer').on('update');
            });
            data('status', status => {
                block.key('status', status);
                //console.log('received status update on preview block', JSON.stringify(status));
                block.on('status_update');
            });
            data('status_time', status_time => {
                block.key('status_time', status_time);
                //console.log('received status_time update on preview block', JSON.stringify(status_time));
                block.on('status_update');
            });
            data('ts_created', ts_created => {
                block.key('ts_created', ts_created);
                block.child('created_year/text').html('').data(`${(new Date(ts_created)).getFullYear()}`);
            });
            data('ts_updated', ts_updated => {
                block.key('ts_updated', ts_updated);
                block.child('last_updated_msg/text').html('').data(`${util.capitalize(util.duration_desc(ts_updated))}`);
            });
        }
!application-item
    init
        {
            var block = Block('div');
            var _block = block;
            block
                .css({
                    width: '390px',
                    height: '230px',
                    borderRadius: '7px',
                    backgroundColor: 'white',
                    '-webkit-box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    'box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    display: 'inline-block',
                    margin: '5px 12px 20px 12px',
                    textAlign: 'left',
                    boxSizing: 'border-box',
                    padding: '20px 22px 20px 32px',
                    position: 'relative',
                    verticalAlign: 'top'
                })
                .add(Block('div', 'bg')
                    .css({
                        position: 'absolute',
                        top: '0',
                        left: '0',
                        width: '100%',
                        height: '100%',
                        zIndex: '0',
                        background: 'url(/img/gear_bg.jpg) no-repeat center center',
                        backgroundSize: 'cover',
                        boxSizing: 'border-box',
                        borderRadius: '7px',
                        opacity: '0.02',
                        //filter:'invert()',
                        backgroundColor: 'white'
                    })
                )
                .add(Block('div', 'menu_top')
                    .css({
                        top: '21px',
                        right: '23px',
                        width: '105px',
                        height: '40px',
                        position: 'absolute',
                        zIndex: '100',
                        display: 'none'
                    })
                    .add(Block('block', 'button_left')
                        .css({
                            position: 'absolute',
                            left: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '1');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var repo = _block.key('repo');
                                        if (repo != null && repo != '' && repo.trim() != '') {
                                            b.child('a').data({ href: `${repo.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/code_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_middle')
                        .css({
                            position: 'absolute',
                            left: '35px',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '27px',
                                width: '27px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '27px',
                                    width: '27px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var link = _block.key('link');
                                        if (link != null && link != '' && link.trim() != '') {
                                            b.child('a').data({ href: `${link.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '27px',
                                        width: '27px',
                                        src: '/img/public_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_right')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('enable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        b.css('opacity', '0.9');
                                        if (_block.key('featured') === false) {
                                            b.child('image').data({
                                                src: '/img/bookmark_new_b.png'
                                            });
                                        }
                                    }
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                    if (_block.key('featured') === false) {
                                        b.child('image').data({
                                            src: '/img/bookmark_ol_b.png'
                                        });
                                    } else {
                                        b.child('image').data({
                                            src: '/img/bookmark_b.png'
                                        });
                                    }
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        app.ws.api.star_project(_block.key('id'));
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/bookmark_ol_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'menu_extra')
                    .css({
                        top: '20px',
                        right: '130px',
                        width: '35px',
                        height: '40px',
                        position: 'absolute',
                        display: 'none'
                    })
                    .add(Block('block', 'button_leftmost')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '23px',
                                width: '23px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '23px',
                                    width: '23px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        //console.log('code');
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '23px',
                                        width: '23px',
                                        src: '/img/launch_b.png',
                                        css: {
                                            backgroundColor: 'white'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'spacer0')
                    .css({
                        height: '8px'
                    })
                )
                .add(Block('div', 'name')
                    .css({
                        fontSize: '27px',
                        fontWeight: '500',  // 600
                        opacity: '0.95',
                        letterSpacing: '1px'
                    })
                    .add(Block('text', 1)
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer1')
                    .css({
                        height: '8px'
                    })
                )
                .add(Block('div', 'description')
                    .css({
                        fontSize: '17px',
                        fontWeight: '300',
                        margin: '10px 2px 5px 5px',
                        opacity: '0.9',
                        letterSpacing: '0.5px',
                        lineHeight: '24px'
                    })
                    .add(Block('text', 'tag')
                        .data('_')
                        .css({
                            fontWeight: '500',
                            display: 'none'
                        })
                    )
                    .add(Block('text', 'spacer')
                        .on('update', (e, b, d) => {
                            /*
                            var tagline_exists = _block.key('tagline') && _block.key('tagline').trim().length > 0;
                            var desc_exists = _block.key('description') && _block.key('description').trim().length > 0;
                            if (tagline_exists && desc_exists) b.css('display', 'inline-block');
                            e.stopPropagation();
                            */
                        })
                        .html('&nbsp;–&nbsp;')
                        .css({
                            display: 'none'
                        })
                    )
                    .add(Block('text', 'desc')
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer2')
                    .css({
                        height: '5px'
                    })
                )
                .add(Block('div', 'application_content')
                    .class('application-content')
                    .css({
                        maxHeight: '120px',
                        height: '100%',
                        width: '99%',
                    })
                    .query('window width != 0', function (event, block, data) {
                        block.css('max-height', `calc(100% - ${3 - 3 + ((5 + block.sibling('description').$().height() + 20 + 20 + 10) + 45)}px)`);
                    })
                    .add(Block('block', 'content')
                        .add(Block('div', 'mdl_button_container')
                            .css({
                                height: '45px',
                                width: '150px',
                                margin: '0 auto',
                            })
                            .add(Block('button', 1)
                                .class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect')
                                .html('Manage')
                                .css({
                                    backgroundColor: app.ui.colors.primary,
                                    color: 'white',
                                    letterSpacing: '2.5px',
                                    fontSize: '12px',
                                    fontWeight: '500',
                                    paddingLeft: '25px',
                                    paddingRight: '25px',
                                    opacity: '1',
                                    transition: 'opacity 0.2s ease',
                                    height: '42px',
                                    outline: 'none'
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.8');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '1');
                                })
                                .on('click', (e, b, d) => {
                                    var application_metadata = null;
                                    application_metadata =  _block.key('application_metadata');
                                    if (application_metadata) {
                                        _block.parent(1).data({
                                            select_application: application_metadata
                                        });
                                    }
                                })
                            )
                        )
                    )
                )
                .add(Block('div', 'created_year')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        right: '30px',
                        width: '40px',
                        height: '20px',
                        fontSize: '19px',
                        opacity: '0.9'
                    })
                    .add(Block('text', 1)
                        .data(`${(new Date()).getFullYear()}`)
                    )
                )
                .add(Block('div', 'last_updated_msg')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        left: '33px',
                        width: '100px',
                        height: '20px',
                        fontSize: '14px',
                        opacity: '0.85'
                    })
                    .add(Block('text', 1)
                        .data('Some time ago')
                    )
                )
                .on('status_update', (e, b, d) => {
                    _block.data({
                        ts_updated: block.key('ts_updated')
                    });
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
                block.child('application_content/content/mdl_button_container/button').id(`manage_application_button_${_id.toString()}`);
            });
            data('name', (name) => {
                block.key('name', name.toString());
                block.child('name/text').html('').data(name);
            });
            data('description', (description) => {
                block.key('description', description.toString());
                block.child('description/desc').html('').data(description);
                block.child('description/spacer').on('update');
            });
            data('tagline', (tagline) => {
                block.key('tagline', tagline.toString());
                block.child('description/tag').html('').data(tagline);
                block.child('description/spacer').on('update');
            });
            data('featured', featured => {
                block.key('featured', featured);
                var img = '/img/bookmark';
                if (featured) {
                    img += '_b.png';
                } else {
                    img += '_ol_b.png';
                }
                block.child('menu_top/button_right/button_wrap/button/image').data({ src: img });
            });
            data('public', public => {
                var img_src = '/img/public' + (public === true ? '' : '_off') + '_b.png';
                block.child('menu_top/button_middle/button_wrap/button/image').data({
                    src: img_src
                });
            });
            data('link', link => {
                block.key('link', link);
                block.child('menu_top/button_middle/button_wrap/button').on(link == '' ? 'disable' : 'enable');
            });
            data('repo', repo => {
                block.key('repo', repo);
                block.child('menu_top/button_left/button_wrap/button').on(repo == '' ? 'disable' : 'enable');
            });
            data('ts_created', ts_created => {
                block.key('ts_created', ts_created);
                block.child('created_year/text').html('').data(`${(new Date(ts_created)).getFullYear()}`);
            });
            data('ts_updated', ts_updated => {
                block.key('ts_updated', ts_updated);
                block.child('last_updated_msg/text').html('').data(`${util.capitalize(util.duration_desc(ts_updated))}`);
            });
            data('img', img => {
                block.key('img', img);
                if (img.trim() != '') {
                    block.child('bg').css({
                        backgroundImage: `url(${img.trim()})`,
                        opacity: '0.04',
                    });
                }
            });
            data('img_invert', img_invert => {
                block.key('img_invert', img_invert);
                block.child('bg').css({
                    filter: img_invert == true ? 'invert()' : 'none'
                });
            });
            data('code', code => {
                block.key('code', code);
                if (code.hasOwnProperty('repo'))
                    block.data({repo: code.repo});
            });
        }
!domain-item
    init
        {
            var block = Block('div');
            var _block = block;
            block
                .css({
                    width: '390px',
                    height: '190px',
                    borderRadius: '7px',
                    backgroundColor: 'white',
                    '-webkit-box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    'box-shadow': '2px 2px 5px 2px rgba(64,64,64,0.1)',
                    display: 'inline-block',
                    margin: '5px 12px 20px 12px',
                    textAlign: 'left',
                    boxSizing: 'border-box',
                    padding: '20px 22px 20px 32px',
                    position: 'relative',
                    verticalAlign: 'top'
                })
                .add(Block('div', 'bg')
                    .css({
                        position: 'absolute',
                        top: '0',
                        left: '0',
                        width: '100%',
                        height: '100%',
                        zIndex: '0',
                        background: 'url(/img/gear_bg.jpg) no-repeat center center',
                        backgroundSize: 'cover',
                        boxSizing: 'border-box',
                        borderRadius: '7px',
                        opacity: '0.02',
                        //filter:'invert()',
                        backgroundColor: 'white'
                    })
                )
                .add(Block('div', 'menu_top')
                    .css({
                        top: '21px',
                        right: '23px',
                        width: '105px',
                        height: '40px',
                        position: 'absolute',
                        zIndex: '100',
                        display: 'none'
                    })
                    .add(Block('block', 'button_left')
                        .css({
                            position: 'absolute',
                            left: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '1');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var repo = _block.key('repo');
                                        if (repo != null && repo != '' && repo.trim() != '') {
                                            b.child('a').data({ href: `${repo.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/code_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_middle')
                        .css({
                            position: 'absolute',
                            left: '35px',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '27px',
                                width: '27px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '27px',
                                    width: '27px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        var link = _block.key('link');
                                        if (link != null && link != '' && link.trim() != '') {
                                            b.child('a').data({ href: `${link.trim()}` }).node().click();
                                        }
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '27px',
                                        width: '27px',
                                        src: '/img/public_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                                .add(Block('a', 1)
                                    .css({
                                        display: 'none',
                                    })
                                    .data({
                                        href: '#',
                                        target: '_blank'
                                    })
                                )
                            )
                        )
                    )
                    .add(Block('block', 'button_right')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '30px',
                                width: '30px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '30px',
                                    width: '30px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease',
                                    backgroundColor: 'rgba(255,255,255,0)'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('enable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        b.css('opacity', '0.9');
                                        if (_block.key('featured') === false) {
                                            b.child('image').data({
                                                src: '/img/bookmark_new_b.png'
                                            });
                                        }
                                    }
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                    if (_block.key('featured') === false) {
                                        b.child('image').data({
                                            src: '/img/bookmark_ol_b.png'
                                        });
                                    } else {
                                        b.child('image').data({
                                            src: '/img/bookmark_b.png'
                                        });
                                    }
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        app.ws.api.star_project(_block.key('id'));
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '30px',
                                        width: '30px',
                                        src: '/img/bookmark_ol_b.png',
                                        css: {
                                            backgroundColor: 'rgba(255,255,255,0)'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'menu_extra')
                    .css({
                        top: '20px',
                        right: '130px',
                        width: '35px',
                        height: '40px',
                        position: 'absolute',
                        display: 'none'
                    })
                    .add(Block('block', 'button_leftmost')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '35px',
                        })
                        .add(Block('div', 'button_wrap')
                            .css({
                                height: '23px',
                                width: '23px',
                                display: 'inline-block'
                            })
                            .add(Block('button', 1)
                                .key('disabled', 'no')
                                .css({
                                    height: '23px',
                                    width: '23px',
                                    outline: 'none',
                                    border: 'none',
                                    padding: '0',
                                    opacity: '0.7',
                                    transition: 'opacity 0.15s ease'
                                })
                                .on('disable', (e, b, d) => {
                                    b.key('disabled', 'yes');
                                    b.css({
                                        opacity: '0.5',
                                        pointerEvents: 'none'
                                    });
                                })
                                .on('enable', (e, b, d) => {
                                    b.key('disabled', 'no');
                                    b.css({
                                        opacity: '0.7',
                                        pointerEvents: 'auto'
                                    });
                                })
                                .on('disable')
                                .on('mouseover', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.9');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.key('disabled') == 'no')
                                        b.css('opacity', '0.7');
                                })
                                .on('click', (e, b, d) => {
                                    if (b.key('disabled') == 'no') {
                                        //console.log('code');
                                    }
                                })
                                .add(Block('image', 1)
                                    .data({
                                        height: '23px',
                                        width: '23px',
                                        src: '/img/launch_b.png',
                                        css: {
                                            backgroundColor: 'white'
                                        }
                                    })
                                )
                            )
                        )
                    )
                )
                .add(Block('div', 'spacer0')
                    .css({
                        height: '8px'
                    })
                )
                .add(Block('div', 'name')
                    .css({
                        fontSize: '27px',
                        fontWeight: '500',  // 600
                        opacity: '0.95',
                        letterSpacing: '1px'
                    })
                    .add(Block('text', 1)
                        .data('_')
                    )
                )
                .add(Block('div', 'spacer1')
                    .css({
                        height: '8px'
                    })
                )
                .add(Block('div', 'description')
                    .css({
                        fontSize: '17px',
                        fontWeight: '300',
                        margin: '10px 2px 5px 5px',
                        opacity: '0.9',
                        letterSpacing: '0.5px',
                        lineHeight: '24px',
                    })
                    .add(Block('text', 'tag')
                        .data('_')
                        .css({
                            fontWeight: '500',
                            display: 'none'
                        })
                    )
                    .add(Block('text', 'spacer')
                        .on('update', (e, b, d) => {
                            /*
                            var tagline_exists = _block.key('tagline') && _block.key('tagline').trim().length > 0;
                            var desc_exists = _block.key('description') && _block.key('description').trim().length > 0;
                            if (tagline_exists && desc_exists) b.css('display', 'inline-block');
                            e.stopPropagation();
                            */
                        })
                        .html('&nbsp;–&nbsp;')
                        .css({
                            display: 'none'
                        })
                    )
                    .add(Block('text', 'desc')
                        .data('_').html('')
                    )
                )
                .add(Block('div', 'spacer2')
                    .css({
                        height: '5px'
                    })
                )
                .add(Block('div', 'domain_content')
                    .class('domain-content')
                    .css({
                        maxHeight: '120px',
                        height: '100%',
                        width: '99%',
                    })
                    .query('window width != 0', function (event, block, data) {
                        block.css('max-height', `calc(100% - ${3 - 3 + ((5 + block.sibling('description').$().height() + 20 + 20 + 10) + 45)}px)`);
                    })
                    .add(Block('block', 'content')
                        .add(Block('div', 'mdl_button_container')
                            .css({
                                height: '45px',
                                width: '150px',
                                margin: '0 auto',
                            })
                            .add(Block('button', 1)
                                .class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect')
                                .html('Manage')
                                .css({
                                    backgroundColor: app.ui.colors.primary,
                                    color: 'white',
                                    letterSpacing: '2.5px',
                                    fontSize: '12px',
                                    fontWeight: '500',
                                    paddingLeft: '20px',
                                    paddingRight: '20px',
                                    opacity: '1',
                                    transition: 'opacity 0.2s ease',
                                    height: '40px',
                                    outline: 'none'
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.8');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '1');
                                })
                                .on('click', (e, b, d) => {
                                    var domain_metadata = null;
                                    domain_metadata =  _block.key('domain_metadata');
                                    if (domain_metadata) {
                                        _block.parent(1).data({
                                            select_domain: domain_metadata
                                        });
                                    }
                                })
                            )
                        )
                    )
                )
                .add(Block('div', 'created_year')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        right: '30px',
                        width: '40px',
                        height: '20px',
                        fontSize: '19px',
                        opacity: '0.9'
                    })
                    .add(Block('text', 1)
                        .data(`${(new Date()).getFullYear()}`)
                    )
                )
                .add(Block('div', 'last_updated_msg')
                    .css({
                        position: 'absolute',
                        bottom: '25px',
                        left: '33px',
                        width: '100px',
                        height: '20px',
                        fontSize: '14px',
                        opacity: '0.85'
                    })
                    .add(Block('text', 1)
                        .data('Some time ago')
                    )
                )
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
                block.child('domain_content/content/mdl_button_container/button').id(`manage_domain_button_${_id.toString()}`);
            });
            data('domain', (domain) => {
                block.key('domain', domain.toString());
                block.child('name/text').html('').data(domain);
            });
            data('ts_created', ts_created => {
                block.key('ts_created', ts_created);
                block.child('created_year/text').html('').data(`${(new Date(ts_created)).getFullYear()}`);
            });
            data('ts_updated', ts_updated => {
                block.key('ts_updated', ts_updated);
                block.child('last_updated_msg/text').html('').data(`${util.capitalize(util.duration_desc(ts_updated))}`);
            });
        }
!resource-application-list-item
    init
        {
            var block = Block('block');
            block
                .__child('content')
                    .css('text-align', 'left')
                    .__parent()
                .css({
                    height: '44px',
                    width: '100%',
                    marginBottom: '3px',
                    borderBottom: '1px solid #f6f6f6',
                    position: 'relative',
                    //backgroundColor: 'red' ? 
                })
                .add(Block('text', 1)
                    .css({
                        fontSize: '16px',
                        letterSpacing: '0.6px',
                        paddingLeft: '7px',
                        color: '#444'
                    })
                )
                .add(Block('block', 'port')
                    .__child('content')
                        .css('text-align', 'right')
                        .__parent()
                    .css({
                        position: 'absolute',
                        right: '45px',
                        top: '0',
                        width: 'auto'
                    })
                    .add(Block('text', 1)
                        .html('<span class="text_placeholder" style="opacity: 0.7;">:80</span>')
                        .css({
                            'padding': '0 3px',
                            fontSize: '14px',
                            letterSpacing: '1px',
                            color: '#444',
                            fontWeight: '300'
                        })
                    )
                )
                .add(Block('block', 'manage')
                    .css({
                        position: 'absolute',
                        right: '0',
                        top: '0',
                        width: '40px'
                    })
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/launch_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.6',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                b.css('opacity', '0.85');
                            })
                            .on('mouseout', (e, b, d) => {
                                b.css('opacity', '0.6');
                            })
                            .on('click', (e, b, d) => {
                                block.parent().data({
                                    manage: block.key('id')
                                });
                            })
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
            });
            data('name', (name) => {
                block.key('name', name.toString());
                block.child('text').html('').data(name);
            });
            data('port', (port) => {
                block.key('port', port);
                var port_alt = (`:${port}`).trim();
                if (port_alt == ':') port_alt = '<span class="text_placeholder" style="opacity: 0.7;">:80</span>';
                block.child('port/text').html(port_alt);
            });
            data('first', (first) => {
                block.key('first', first);
            });
        }
!project-application-list-item
    init
        {
            var block = Block('block');
            block
                .__child('content')
                    .css('text-align', 'left')
                    .__parent()
                .css({
                    height: '44px',
                    width: '100%',
                    marginBottom: '3px',
                    borderBottom: '1px solid #f6f6f6',
                    position: 'relative',
                    //backgroundColor: 'red' ? 
                })
                .add(Block('text', 1)
                    .css({
                        fontSize: '16px',
                        letterSpacing: '0.6px',
                        paddingLeft: '7px',
                        color: '#444'
                    })
                )
                .add(Block('block', 'port')
                    .__child('content')
                        .css('text-align', 'right')
                        .__parent()
                    .css({
                        position: 'absolute',
                        right: '75px',
                        top: '0',
                        width: 'auto',
                        display: 'none'
                    })
                    .add(Block('text', 1)
                        .html('<span class="text_placeholder" style="opacity: 0.7;">:80</span>')
                        .css({
                            'padding': '0 3px',
                            fontSize: '14px',
                            letterSpacing: '1px',
                            color: '#444',
                            fontWeight: '300'
                        })
                    )
                )
                .add(Block('block', 'link')
                    .css({
                        position: 'absolute',
                        right: '66px',
                        top: '0',
                        width: '40px'
                    })
                    .key('toggled', 'no')
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/link_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.2',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                if (b.parent(1).key('toggled') == 'yes') {
                                    b.css('opacity', '0.8');
                                } else b.css('opacity', '0.2');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.parent(1).key('toggled') == 'yes') {
                                    b.css('opacity', '0.6');
                                } else b.css('opacity', '0.2');
                            })
                            .on('click', (e, b, d) => {
                                if (b.parent(1).key('toggled') == 'yes')
                                    block.parent().data({ link: block.key('id') });
                            })
                        )
                    )
                )
                .add(Block('block', 'delete')
                    .css({
                        position: 'absolute',
                        right: '33px',
                        top: '0',
                        width: '40px'
                    })
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/delete_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.6',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                b.css('opacity', '0.85');
                            })
                            .on('mouseout', (e, b, d) => {
                                b.css('opacity', '0.6');
                            })
                            .on('click', (e, b, d) => {
                                block.parent().data({
                                    del: {
                                        app_id: block.key('id'),
                                        app_name: block.key('name')
                                    }
                                });
                            })
                        )
                    )
                )
                .add(Block('block', 'manage')
                    .css({
                        position: 'absolute',
                        right: '0',
                        top: '0',
                        width: '40px'
                    })
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/launch_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.6',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                b.css('opacity', '0.85');
                            })
                            .on('mouseout', (e, b, d) => {
                                b.css('opacity', '0.6');
                            })
                            .on('click', (e, b, d) => {
                                block.parent().data({
                                    manage: block.key('id')
                                });
                            })
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
            });
            data('name', (name) => {
                block.key('name', name.toString());
                block.child('text').html('').data(name);
            });
            data('port', (port) => {
                block.key('port', port);
                var port_alt = (`:${port}`).trim();
                if (port_alt == ':') port_alt = '<span class="text_placeholder" style="opacity: 0.7;">:80</span>';
                block.child('port/text').html(port_alt);
            });
            data('primary_domain', (primary_domain) => {
                //console.log(primary_domain);
                block.key('primary_domain', primary_domain);
                if (primary_domain && primary_domain != "") {
                    block.child('link').key('toggled', 'yes');
                    block.child('link/wrap/image').css('opacity', '0.6');
                } else {
                    block.child('link').key('toggled', 'no');
                    block.child('link/wrap/image').css('opacity', '0.2');

                }
            });
            data('first', (first) => {
                block.key('first', first);
            });
        }
!DEPRECATED-resource-domain-list-item
    init
        {
            var block = Block('block');
            block
                .__child('content')
                    .css('text-align', 'left')
                    .__parent()
                .css({
                    height: '44px',
                    width: '100%',
                    marginBottom: '3px',
                    borderBottom: '1px solid #f6f6f6',
                    position: 'relative',
                    //backgroundColor: 'red' ? 
                })
                .add(Block('text', 1)
                    .css({
                        fontSize: '16px',
                        letterSpacing: '0.6px',
                        paddingLeft: '7px',
                        color: '#444'
                    })
                )
                .add(Block('block', 'port')
                    .__child('content')
                        .css('text-align', 'right')
                        .__parent()
                    .css({
                        position: 'absolute',
                        right: '75px',
                        top: '0',
                        width: 'auto',
                        display: 'none'
                    })
                    .add(Block('text', 1)
                        .html('<span class="text_placeholder" style="opacity: 0.7;">:80</span>')
                        .css({
                            'padding': '0 3px',
                            fontSize: '14px',
                            letterSpacing: '1px',
                            color: '#444',
                            fontWeight: '300'
                        })
                    )
                )
                .add(Block('block', 'link')
                    .css({
                        position: 'absolute',
                        right: '66px',
                        top: '0',
                        width: '40px'
                    })
                    .key('toggled', 'no')
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/link_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.2',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                if (b.parent(1).key('toggled') == 'yes') {
                                    b.css('opacity', '0.5');
                                } else b.css('opacity', '0.5');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.parent(1).key('toggled') == 'yes') {
                                    b.css('opacity', '0.65');
                                } else b.css('opacity', '0.2');
                            })
                            .on('click', (e, b, d) => {
                                if (block.key('selected') === true || b.parent(1).key('toggled') == 'yes') {
                                    block.parent().data({ link: '' });
                                } else {
                                    block.parent().data({ link: block.key('id') });
                                }
                            })
                        )
                    )
                )
                .add(Block('block', 'delete')
                    .css({
                        position: 'absolute',
                        right: '33px',
                        top: '0',
                        width: '40px'
                    })
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/delete_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.6',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                b.css('opacity', '0.85');
                            })
                            .on('mouseout', (e, b, d) => {
                                b.css('opacity', '0.6');
                            })
                            .on('click', (e, b, d) => {
                                block.parent().data({
                                    del: {
                                        domain_id: block.key('id'),
                                        domain_name: block.key('domain_name')
                                    }
                                });
                            })
                        )
                    )
                )
                .add(Block('block', 'manage')
                    .css({
                        position: 'absolute',
                        right: '0',
                        top: '0',
                        width: '40px'
                    })
                    .add(Block('block', 'wrap')
                        .css({
                            width: '30px',
                            height: '30px',
                            margin: '0 auto'
                        })
                        .add(Block('image', 1)
                            .data({
                                src: '/img/launch_b.png',
                                height: '22px',
                                width: '22px',
                                css: {
                                    margin: '0 auto',
                                    opacity: '0.6',
                                    transition: 'opacity 0.2s ease',
                                    cursor: 'pointer'
                                }
                            })
                            .on('mouseover', (e, b, d) => {
                                b.css('opacity', '0.85');
                            })
                            .on('mouseout', (e, b, d) => {
                                b.css('opacity', '0.6');
                            })
                            .on('click', (e, b, d) => {
                                block.parent().data({
                                    manage: block.key('id')
                                });
                            })
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
            });
            data('domain', (domain) => {
                block.key('domain_name', domain.toString());
                block.child('text').html('').data(domain);
            });
            data('port', (port) => {
                block.key('port', port);
                var port_alt = (`:${port}`).trim();
                if (port_alt == ':') port_alt = '<span class="text_placeholder" style="opacity: 0.7;">:80</span>';
                block.child('port/text').html(port_alt);
            });
            data('selected', (selected) => {
                block.key('selected', selected === true);
                block.child('link').key('toggled', (selected === true ? 'yes' : 'no'));
                block.child('link/wrap/image').css('opacity', (selected === true ? '0.65' : '0.2'));
            });
            data('first', (first) => {
                block.key('first', first);
            });
        }
!resource-domain-list-item
    init
        {
            // should be identical to the application-domain-list-item
            var block = Block('div');
            block
                .css({
                    height: '46px',
                    width: '100%',
                    marginBottom: '3px',
                })
                .add(Block('block', 1)
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .css({
                        height: '46px',
                        borderBottom: '1px solid #f6f6f6',
                        position: 'relative',
                        width: '100%',
                    })
                    .add(Block('a', 'text')
                        .css({
                            fontSize: '16px',
                            letterSpacing: '0.6px',
                            paddingLeft: '7px',
                            color: '#444'
                        })
                        .attribute('href', '#')
                        .attribute('target', '_blank')
                        .add(Block('text', 1))
                    )
                    .add(Block('block', 'subdomain')
                        .__child('content')
                            .css('text-align', 'right')
                            .__parent()
                        .css({
                            position: 'absolute',
                            right: '113px',
                            top: '0',
                            width: 'auto',
                        })
                        .add(Block('div', 'select_wrap')
                            .css({
                                height: '27px',
                                width: '150px',
                            })
                            .add(Block('select', 1)
                                .css({
                                    'padding': '0 3px',
                                    fontSize: '14px',
                                    letterSpacing: '1px',
                                    color: '#444',
                                    fontWeight: '300',
                                    height: '100%',
                                    width: '100%',
                                    borderRadius: '3px',
                                    cursor: 'pointer',
                                    textAlign: 'left'
                                })
                                .add(Block('option', '__none__')
                                    .html('None').attribute('value', '__none__')
                                )
                                .on('input', (e, b, d) => {
                                    block.parent().data({ update_item: {
                                        id: block.key('id'), idx: block.key('idx'),
                                        sub: b.node().value === '__none__' ? '' : b.node().value,
                                    } });
                                    if (block.key('selected') === true) {
                                        block.parent().data({ link_sub: {
                                            id: block.key('id'), sub: b.node().value === '__none__' ? '' : b.node().value
                                        } });
                                    }
                                })
                            )
                        )
                    )
                    .add(Block('block', 'link')
                        .css({
                            position: 'absolute',
                            right: '66px',
                            top: '0',
                            width: '40px'
                        })
                        .key('toggled', 'no')
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/link_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.2',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    if (b.parent(1).key('toggled') == 'yes') {
                                        b.css('opacity', '0.5');
                                    } else b.css('opacity', '0.5');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.parent(1).key('toggled') == 'yes') {
                                        b.css('opacity', '0.65');
                                    } else b.css('opacity', '0.2');
                                })
                                .on('click', (e, b, d) => {
                                    if (block.key('selected') === true || b.parent(1).key('toggled') == 'yes') {
                                        block.parent().data({ link_sub: {
                                            id: '', sub: ''
                                        } });
                                    } else {
                                        var sub = '';
                                        sub = block.child('block/subdomain/select_wrap/select').node().value;
                                        if (sub == '__none__') sub = '';
                                        block.parent().data({ link_sub: {
                                            id: block.key('id'), sub: sub
                                        } });
                                    }
                                })
                            )
                        )
                    )
                    .add(Block('block', 'delete')
                        .css({
                            position: 'absolute',
                            right: '33px',
                            top: '0',
                            width: '40px'
                        })
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/delete_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.6',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    block.parent().data({
                                        del: {
                                            domain_id: block.key('id'),
                                            domain_name: block.key('domain_name'),
                                            domain_string: block.key('domain_string'),
                                            domain_sub: block.key('sub'),
                                        }
                                    });
                                })
                            )
                        )
                    )
                    .add(Block('block', 'manage')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '40px'
                        })
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/launch_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.6',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    block.parent().data({
                                        manage: block.key('id')
                                    });
                                })
                            )
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            data('domain_string', (domain_string) => {
                block.key('domain_string', domain_string.toString());
                //console.log('domain_string', domain_string);
            });
            data('_id', (_id) => {
                block.key('id', _id.toString());
            });
            data('idx', (idx) => {
                block.key('idx', idx.toString());
            });
            data('domain', (domain) => {
                block.key('domain_name', domain.toString());
                block.child('block/text/text').html(domain);
                block.child('block/text').attribute('href', `http://${domain}`);
                var last_sub = block.key('sub');
                if (last_sub != null && last_sub != '')
                    block.child('block/text').attribute('href', `http://${last_sub}.${domain}`);
                var subdomains = block.key('subdomains');
                if (subdomains)
                    block.data({ subdomains: subdomains });
            });
            data('port', (port) => {
                block.key('port', port);
                var port_alt = (`:${port}`).trim();
                if (port_alt == ':') port_alt = '<span class="text_placeholder" style="opacity: 0.7;">:80</span>';
                block.child('block/port/text').html(port_alt);
            });
            data('selected', (selected) => {
                block.key('selected', selected === true);
                block.child('block/link').key('toggled', (selected === true ? 'yes' : 'no'));
                block.child('block/link/wrap/image').css('opacity', (selected === true ? '0.65' : '0.2'));
            });
            data('subdomains', (subdomains) => {
                block.key('subdomains', subdomains);
                var domain = block.key('domain_name');
                if (!domain) domain = '';
                var select_block = block.child('block/subdomain/select_wrap/select');
                select_block.html('').add(Block('option', '__none__')
                    .html('None').attribute('value', '__none__')
                );
                for (var s in subdomains) {
                    select_block.add(Block('option', subdomains[s])
                        .html(`${subdomains[s]}.${domain}`).attribute('value', subdomains[s])
                    );
                }
                if (block.key('sub') != '' && block.key('sub') != null) {
                    block.data({ sub: block.key('sub') });
                }
            });
            data('sub', sub => {
                block.key('sub', sub);
                var domain = block.key('domain_name');
                if (!domain) domain = "";
                var select_block = block.child('block/subdomain/select_wrap/select');
                var children = select_block.children();
                for (var c in children) {
                    children[c].node().removeAttribute('selected');
                }
                if (select_block.child(sub) != null) {
                    domain = `${sub}.${domain}`;
                    select_block.child(sub).attribute('selected', 'selected');
                    select_block.node().value = sub;
                } else {
                    select_block.child('__none__').attribute('selected', 'selected');
                    select_block.node().value = '__none__';
                }
                block.child('block/text').attribute('href', `http://${domain}`);
            });
            data('first', (first) => {
                block.key('first', first);
            });
        }
!application-domain-list-item
    init
        {
            var block = Block('div');
            block
                .css({
                    height: '46px',
                    width: '100%',
                    marginBottom: '3px',
                })
                .add(Block('block', 1)
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .css({
                        height: '46px',
                        borderBottom: '1px solid #f6f6f6',
                        position: 'relative',
                        width: '100%',
                    })
                    .add(Block('a', 'text')
                        .css({
                            fontSize: '16px',
                            letterSpacing: '0.6px',
                            paddingLeft: '7px',
                            color: '#444'
                        })
                        .attribute('href', '#')
                        .attribute('target', '_blank')
                        .add(Block('text', 1))
                    )
                    .add(Block('block', 'subdomain')
                        .__child('content')
                            .css('text-align', 'right')
                            .__parent()
                        .css({
                            position: 'absolute',
                            right: '113px',
                            top: '0',
                            width: 'auto',
                        })
                        .add(Block('div', 'select_wrap')
                            .css({
                                height: '27px',
                                width: '150px',
                            })
                            .add(Block('select', 1)
                                .css({
                                    'padding': '0 3px',
                                    fontSize: '14px',
                                    letterSpacing: '1px',
                                    color: '#444',
                                    fontWeight: '300',
                                    height: '100%',
                                    width: '100%',
                                    borderRadius: '3px',
                                    cursor: 'pointer',
                                    textAlign: 'left'
                                })
                                .add(Block('option', '__none__')
                                    .html('None').attribute('value', '__none__')
                                )
                                .on('input', (e, b, d) => {
                                    block.parent().data({ update_item: {
                                        id: block.key('id'), idx: block.key('idx'),
                                        sub: b.node().value === '__none__' ? '' : b.node().value,
                                    } });
                                    if (block.key('selected') === true) {
                                        block.parent().data({ link_sub: {
                                            id: block.key('id'), sub: b.node().value === '__none__' ? '' : b.node().value
                                        } });
                                    }
                                })
                            )
                        )
                    )
                    .add(Block('block', 'link')
                        .css({
                            position: 'absolute',
                            right: '66px',
                            top: '0',
                            width: '40px'
                        })
                        .key('toggled', 'no')
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/link_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.2',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    if (b.parent(1).key('toggled') == 'yes') {
                                        b.css('opacity', '0.5');
                                    } else b.css('opacity', '0.5');
                                })
                                .on('mouseout', (e, b, d) => {
                                    if (b.parent(1).key('toggled') == 'yes') {
                                        b.css('opacity', '0.65');
                                    } else b.css('opacity', '0.2');
                                })
                                .on('click', (e, b, d) => {
                                    if (block.key('selected') === true || b.parent(1).key('toggled') == 'yes') {
                                        block.parent().data({ link_sub: {
                                            id: '', sub: ''
                                        } });
                                    } else {
                                        var sub = '';
                                        sub = block.child('block/subdomain/select_wrap/select').node().value;
                                        if (sub == '__none__') sub = '';
                                        block.parent().data({ link_sub: {
                                            id: block.key('id'), sub: sub
                                        } });
                                    }
                                })
                            )
                        )
                    )
                    .add(Block('block', 'delete')
                        .css({
                            position: 'absolute',
                            right: '33px',
                            top: '0',
                            width: '40px'
                        })
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/delete_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.6',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    block.parent().data({
                                        del: {
                                            domain_id: block.key('id'),
                                            domain_name: block.key('domain_name'),
                                            domain_string: block.key('domain_string'),
                                            domain_sub: block.key('sub'),
                                        }
                                    });
                                })
                            )
                        )
                    )
                    .add(Block('block', 'manage')
                        .css({
                            position: 'absolute',
                            right: '0',
                            top: '0',
                            width: '40px'
                        })
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/launch_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.6',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    block.parent().data({
                                        manage: block.key('id')
                                    });
                                })
                            )
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            data('domain_string', (domain_string) => {
                block.key('domain_string', domain_string.toString());
                //console.log('domain_string', domain_string);
            });
            data('_id', (_id) => {
                block.key('id', _id.toString());
            });
            data('idx', (idx) => {
                block.key('idx', idx.toString());
            });
            data('domain', (domain) => {
                block.key('domain_name', domain.toString());
                block.child('block/text/text').html(domain);
                block.child('block/text').attribute('href', `http://${domain}`);
                var last_sub = block.key('sub');
                if (last_sub != null && last_sub != '')
                    block.child('block/text').attribute('href', `http://${last_sub}.${domain}`);
                var subdomains = block.key('subdomains');
                if (subdomains)
                    block.data({ subdomains: subdomains });
            });
            data('port', (port) => {
                block.key('port', port);
                var port_alt = (`:${port}`).trim();
                if (port_alt == ':') port_alt = '<span class="text_placeholder" style="opacity: 0.7;">:80</span>';
                block.child('block/port/text').html(port_alt);
            });
            data('selected', (selected) => {
                block.key('selected', selected === true);
                block.child('block/link').key('toggled', (selected === true ? 'yes' : 'no'));
                block.child('block/link/wrap/image').css('opacity', (selected === true ? '0.65' : '0.2'));
            });
            data('subdomains', (subdomains) => {
                block.key('subdomains', subdomains);
                var domain = block.key('domain_name');
                if (!domain) domain = '';
                var select_block = block.child('block/subdomain/select_wrap/select');
                select_block.html('').add(Block('option', '__none__')
                    .html('None').attribute('value', '__none__')
                );
                for (var s in subdomains) {
                    select_block.add(Block('option', subdomains[s])
                        .html(`${subdomains[s]}.${domain}`).attribute('value', subdomains[s])
                    );
                }
                if (block.key('sub') != '' && block.key('sub') != null) {
                    block.data({ sub: block.key('sub') });
                }
            });
            data('sub', sub => {
                block.key('sub', sub);
                var domain = block.key('domain_name');
                if (!domain) domain = "";
                var select_block = block.child('block/subdomain/select_wrap/select');
                var children = select_block.children();
                for (var c in children) {
                    children[c].node().removeAttribute('selected');
                }
                if (select_block.child(sub) != null) {
                    domain = `${sub}.${domain}`;
                    select_block.child(sub).attribute('selected', 'selected');
                    select_block.node().value = sub;
                } else {
                    select_block.child('__none__').attribute('selected', 'selected');
                    select_block.node().value = '__none__';
                }
                block.child('block/text').attribute('href', `http://${domain}`);
            });
            data('first', (first) => {
                block.key('first', first);
            });
        }
!domain-certificate-list-item
    init
        {
            var block = Block('div');
            block
                .key('expiration', -1)
                .css({
                    minHeight: '180px',
                    width: '100%',
                    marginBottom: '3px',
                    height: 'auto'
                })
                .add(Block('div', 'block')
                    .css({
                        height: '100%',
                        borderBottom: '1px solid #f6f6f6',
                        position: 'relative',
                        width: '100%',
                    })
                    .add(Block('div', 'spacer')
                        .css({ height: '12px' })
                    )
                    .add(Block('text', 1)
                        .css({
                            fontSize: '16px',
                            letterSpacing: '0.6px',
                            paddingLeft: '7px',
                            color: '#444',
                        })
                    )
                    .add(Block('div', 'subdomains_available')
                        .css({
                            display: 'inline-block',
                            marginLeft: '15px',
                            height: '27px',
                            width: '190px',
                            position: 'relative'
                        })
                        .add(Block('select', 1)
                            .css({
                                'padding': '0 3px',
                                fontSize: '14px',
                                letterSpacing: '1px',
                                color: '#444',
                                fontWeight: '300',
                                height: '100%',
                                width: '80%',
                                borderRadius: '3px',
                                cursor: 'pointer',
                                textAlign: 'left'
                            })
                            .add(Block('option', '__default__')
                                .html('Default').attribute('value', '__default__')
                            )
                        )
                        .add(Block('block', 'add')
                            .css({
                                height: '100%',
                                width: '25px',
                                position: 'absolute',
                                top: '0',
                                right: '3px'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/add_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        transition: 'opacity 0.2s ease',
                                        opacity: '0.6',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    console.log(`add subdomain ${b.parent().sibling('select').node().value} to certificate ${block.key('id')}`);
                                    var subdomains = block.key('subdomains');
                                    if (!subdomains) subdomains = [];
                                    var domain_name = block.key('domain_name');
                                    var add_subdomain = b.parent().sibling('select').node().value;
                                    if (add_subdomain == '__default__') add_subdomain = domain_name;
                                    else add_subdomain = `${add_subdomain}.${domain_name}`;
                                    if (!subdomains.includes(add_subdomain)) subdomains.push(add_subdomain);
                                    block.parent().data({ update_item: {
                                        id: block.key('id'),
                                        update: {
                                            subdomains: subdomains
                                        }
                                    } });
                                })
                            )
                        )
                    )
                    .add(Block('div', 'subdomain_list')
                        .class('value_edge')
                        .css({
                            marginTop: '8px',
                            marginBottom: '3px',
                        })
                        .add(Block('text', 'label')
                            .data('Subdomains')
                            .class('label_desc')
                            .css({
                                fontSize: '10px',
                                marginBottom: '0',
                                height: '14px',
                            })
                        )
                        .add(Block('div', 'value')
                            .class('value_text_wrap')
                            .css('height', 'auto')
                            .add(Block('text', 'text')
                                .data('sub.domain.com')
                                .class('value_text')
                                .css({
                                    fontSize: '12px',
                                    wordBreak: 'break-all'
                                })
                            )
                            .on('mouseover', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'off')
                                    b.child('edit_button').on('show');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'on')
                                    b.child('edit_button').on('hide');
                            })
                            .add(Block('edit-button', 'edit_button')
                                .css({
                                    marginLeft: '14px',
                                    paddingTop: '3px',
                                    height: '17px',
                                    width: '17px',
                                })
                                .on('click', (e, b, d) => {
                                    b.parent().css('display', 'none')
                                        .sibling('value_editor').css('display', 'block');
                                    b.parent().sibling('value_editor').node().value = block.key('subdomains').join(', ');
                                    setTimeout(_ => {
                                        b.parent().sibling('value_editor').node().select();
                                    }, 15);
                                })
                            )
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', 'sub.domain.com')
                            .css({
                                display: 'none',
                                height: '25px',
                                marginTop: '-1px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                fontSize: '12px',
                                width: '90%'
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('value').css('display', 'table');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    value = value.split(',');
                                    for (var v in value) value[v] = value[v].trim();
                                    for (var v = 0; v < value.length; v++) {
                                        if (value[v] == '') {
                                            value.splice(v, 1);
                                            v = 0;
                                        }
                                    };
                                    //if (value.length > 0) {
                                        block.parent().data({ update_item: {
                                            id: block.key('id'),
                                            update: {
                                                subdomains: value
                                            }
                                        } });
                                    //}
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                                e.stopPropagation();
                            })
                        )
                    )
                    .add(Block('div', 'host')
                        .class('value_edge')
                        .css({
                            marginTop: '0',
                            marginBottom: '3px',
                        })
                        .add(Block('text', 'label')
                            .data('Host Resource')
                            .class('label_desc')
                            .css({
                                fontSize: '10px',
                                marginBottom: '0',
                                height: '14px',
                            })
                        )
                        .add(Block('div', 'value')
                            .class('value_text_wrap')
                            .css('height', 'auto')
                            .add(Block('text', 'text')
                                .data('host-resource')
                                .class('value_text')
                                .css({
                                    fontSize: '12px',
                                    wordBreak: 'break-all'
                                })
                            )
                            .on('mouseover', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'off')
                                    b.child('edit_button').on('show');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'on')
                                    b.child('edit_button').on('hide');
                            })
                            .add(Block('edit-button', 'edit_button')
                                .css({
                                    marginLeft: '14px',
                                    paddingTop: '3px',
                                    height: '17px',
                                    width: '17px',
                                })
                                .on('click', (e, b, d) => {
                                    b.parent().css('display', 'none')
                                        .sibling('value_editor').css('display', 'block');
                                    b.parent().sibling('value_editor').node().value = block.key('host');
                                    setTimeout(_ => {
                                        b.parent().sibling('value_editor').node().select();
                                    }, 15);
                                })
                            )
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', 'host-resource')
                            .css({
                                display: 'none',
                                height: '25px',
                                marginTop: '-1px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                fontSize: '12px',
                                width: '90%'
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('value').css('display', 'table');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    //if (value.length > 0) {
                                        block.parent().data({ update_item: {
                                            id: block.key('id'),
                                            update: {
                                                host: value
                                            }
                                        } });
                                    //}
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                                e.stopPropagation();
                            })
                        )
                    )
                    .add(Block('div', 'cert_path')
                        .class('value_edge')
                        .css({
                            marginTop: '0',
                            marginBottom: '3px',
                        })
                        .add(Block('text', 'label')
                            .data('SSL Certificate')
                            .class('label_desc')
                            .css({
                                fontSize: '10px',
                                marginBottom: '0',
                                height: '14px',
                            })
                        )
                        .add(Block('div', 'value')
                            .class('value_text_wrap')
                            .css('height', 'auto')
                            .add(Block('text', 'text')
                                .data('/etc/letsencrypt/live/domain.com/fullchain.pem')
                                .class('value_text')
                                .css({
                                    fontSize: '12px',
                                    wordBreak: 'break-all'
                                })
                            )
                            .on('mouseover', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'off')
                                    b.child('edit_button').on('show');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'on')
                                    b.child('edit_button').on('hide');
                            })
                            .add(Block('edit-button', 'edit_button')
                                .css({
                                    marginLeft: '14px',
                                    paddingTop: '3px',
                                    height: '17px',
                                    width: '17px',
                                })
                                .on('click', (e, b, d) => {
                                    b.parent().css('display', 'none')
                                        .sibling('value_editor').css('display', 'block');
                                    b.parent().sibling('value_editor').node().value = block.key('cert_path');
                                    setTimeout(_ => {
                                        b.parent().sibling('value_editor').node().select();
                                    }, 15);
                                })
                            )
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', '/etc/letsencrypt/live/domain.com/fullchain.pem')
                            .css({
                                display: 'none',
                                height: '25px',
                                marginTop: '-1px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                fontSize: '12px',
                                width: '90%'
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('value').css('display', 'table');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    //if (value.length > 0) {
                                        block.parent().data({ update_item: {
                                            id: block.key('id'),
                                            update: {
                                                cert_path: value
                                            }
                                        } });
                                    //}
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                                e.stopPropagation();
                            })
                        )
                    )
                    .add(Block('div', 'cert_key_path')
                        .class('value_edge')
                        .css({
                            marginTop: '0',
                            marginBottom: '3px',
                        })
                        .add(Block('text', 'label')
                            .data('SSL Certificate Key')
                            .class('label_desc')
                            .css({
                                fontSize: '10px',
                                marginBottom: '0',
                                height: '14px',
                            })
                        )
                        .add(Block('div', 'value')
                            .class('value_text_wrap')
                            .css('height', 'auto')
                            .add(Block('text', 'text')
                                .data('/etc/letsencrypt/live/domain.com/privkey.pem')
                                .class('value_text')
                                .css({
                                    fontSize: '12px',
                                    wordBreak: 'break-all'
                                })
                            )
                            .on('mouseover', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'off')
                                    b.child('edit_button').on('show');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'on')
                                    b.child('edit_button').on('hide');
                            })
                            .add(Block('edit-button', 'edit_button')
                                .css({
                                    marginLeft: '14px',
                                    paddingTop: '3px',
                                    height: '17px',
                                    width: '17px',
                                })
                                .on('click', (e, b, d) => {
                                    b.parent().css('display', 'none')
                                        .sibling('value_editor').css('display', 'block');
                                    b.parent().sibling('value_editor').node().value = block.key('cert_key_path');
                                    setTimeout(_ => {
                                        b.parent().sibling('value_editor').node().select();
                                    }, 15);
                                })
                            )
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', '/etc/letsencrypt/live/domain.com/privkey.pem')
                            .css({
                                display: 'none',
                                height: '25px',
                                marginTop: '-1px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                fontSize: '12px',
                                width: '90%'
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('value').css('display', 'table');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    //if (value.length > 0) {
                                        block.parent().data({ update_item: {
                                            id: block.key('id'),
                                            update: {
                                                cert_key_path: value
                                            }
                                        } });
                                    //}
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                                e.stopPropagation();
                            })
                        )
                    )
                    .add(Block('div', 'expiration')
                        .class('value_edge')
                        .css({
                            marginTop: '0',
                            marginBottom: '3px',
                        })
                        .add(Block('text', 'label')
                            .data('Expiration')
                            .class('label_desc')
                            .css({
                                fontSize: '10px',
                                marginBottom: '0',
                                height: '14px',
                            })
                        )
                        .add(Block('div', 'value')
                            .class('value_text_wrap')
                            .css('height', 'auto')
                            .add(Block('text', 'text')
                                .data(`${Date.now()}`)
                                .class('value_text')
                                .css({
                                    fontSize: '12px',
                                    wordBreak: 'break-all'
                                })
                            )
                            .on('mouseover', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'off')
                                    b.child('edit_button').on('show');
                            })
                            .on('mouseout', (e, b, d) => {
                                if (b.child('edit_button').key('showing') == 'on')
                                    b.child('edit_button').on('hide');
                            })
                            .add(Block('edit-button', 'edit_button')
                                .css({
                                    marginLeft: '14px',
                                    paddingTop: '3px',
                                    height: '17px',
                                    width: '17px',
                                })
                                .on('click', (e, b, d) => {
                                    b.parent().css('display', 'none')
                                        .sibling('value_editor').css('display', 'block');
                                    b.parent().sibling('value_editor').node().value = block.key('expiration');
                                    setTimeout(_ => {
                                        b.parent().sibling('value_editor').node().select();
                                    }, 15);
                                })
                            )
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', `${Date.now()}`)
                            .css({
                                display: 'none',
                                height: '25px',
                                marginTop: '-1px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                fontSize: '12px',
                                width: '90%'
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('value').css('display', 'table');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    if (value.length > 0) {
                                        value = parseInt(value);
                                        if (value != NaN) {
                                            block.parent().data({ update_item: {
                                                id: block.key('id'),
                                                update: {
                                                    expiration: value
                                                }
                                            } });
                                        }
                                    }
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                                e.stopPropagation();
                            })
                        )
                    )
                    .add(Block('block', 'renew')
                        .css({
                            position: 'absolute',
                            right: '30px',
                            top: '3px',
                            width: '40px',
                            height: '40px'
                        })
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/lock_reset_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.6',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    app.ui.display_cert_renewal_info();
                                })
                            )
                        )
                    )
                    .add(Block('block', 'delete')
                        .css({
                            position: 'absolute',
                            right: '1px',
                            top: '3px',
                            width: '40px',
                            height: '40px'
                        })
                        .add(Block('block', 'wrap')
                            .css({
                                width: '30px',
                                height: '30px',
                                margin: '0 auto'
                            })
                            .add(Block('image', 1)
                                .data({
                                    src: '/img/delete_b.png',
                                    height: '22px',
                                    width: '22px',
                                    css: {
                                        margin: '0 auto',
                                        opacity: '0.6',
                                        transition: 'opacity 0.2s ease',
                                        cursor: 'pointer'
                                    }
                                })
                                .on('mouseover', (e, b, d) => {
                                    b.css('opacity', '0.85');
                                })
                                .on('mouseout', (e, b, d) => {
                                    b.css('opacity', '0.6');
                                })
                                .on('click', (e, b, d) => {
                                    block.parent().data({
                                        del: block.key('id')
                                    });
                                })
                            )
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            data('_id', (_id) => {
                block.key('id', _id.toString());
                _id = parseInt(_id);
                block.child('block/text').html('').data(`#${_id + 1}`);
            });
            data('domain', (domain) => {
                block.key('domain_name', domain.toString());
                var subdomains = block.key('subdomains');
                if (subdomains)
                    block.data({ subdomains: subdomains });
            });
            data('subdomains_available', (subdomains_available) => {
                block.key('subdomains_available', subdomains_available);
                var domain = block.key('domain_name');
                if (!domain) domain = '';
                var select_block = block.child('block/subdomains_available/select');
                select_block.html('').add(Block('option', '__default__')
                    .html(`${domain == '' ? 'Default' : domain}`).attribute('value', '__default__')
                );
                for (var s in subdomains_available) {
                    select_block.add(Block('option', subdomains_available[s])
                        .html(`${subdomains_available[s]}.${domain}`).attribute('value', subdomains_available[s])
                    );
                }
            });
            data('subdomains', subdomains => {
                block.key('subdomains', subdomains);
                //console.log(subdomains);
                var value = `${subdomains.join(', ')}`;
                var value_alt = `${value}`;
                if (subdomains.length <= 0)
                    value_alt = "<span class='text_placeholder'>No subdomains found.</span>";
                block.child('block/subdomain_list/value/text').html(`${value_alt}`);
                block.child('block/subdomain_list/value_editor').attribute('value', `${value}`);
            });
            data('cert_path', cert_path => {
                block.key('cert_path', cert_path);
                var value_alt = `${cert_path}`;
                if (value_alt == '')
                    value_alt = "<span class='text_placeholder'>/etc/letsencrypt/live/domain.com/fullchain.pem</span>";
                block.child('block/cert_path/value/text').html(`${value_alt}`);
                block.child('block/cert_path/value_editor').attribute('value', `${cert_path}`);
            });
            data('cert_key_path', cert_key_path => {
                block.key('cert_key_path', cert_key_path);
                var value_alt = `${cert_key_path}`;
                if (value_alt == '')
                    value_alt = "<span class='text_placeholder'>/etc/letsencrypt/live/domain.com/privkey.pem</span>";
                block.child('block/cert_key_path/value/text').html(`${value_alt}`);
                block.child('block/cert_key_path/value_editor').attribute('value', `${cert_key_path}`);
            });
            data('host', host => {
                block.key('host', host);
                var value_alt = `${host}`;
                if (value_alt == '')
                    value_alt = "<span class='text_placeholder'>host-resource</span>";
                block.child('block/host/value/text').html(`${value_alt}`);
                block.child('block/host/value_editor').attribute('value', `${host}`);
            });
            data('first', (first) => {
                block.key('first', first);
            });
            data('expiration', expiration => {
                block.key('expiration', expiration);
                var expiration_desc = util.duration_desc(expiration * 1000, true);
                block.child('block/expiration/value/text').html('').data(`${expiration_desc}`);
                block.child('block/expiration/value_editor').attribute('value', `${expiration}`);
                var deltaSec = parseInt(expiration) - parseInt(Date.now() / 1000);
                console.log(deltaSec);
                if (deltaSec <= 604800 + (86400 * 2)) { //  1 week + 2 days
                    block.child('block/renew').css('display', 'table');
                } else block.child('block/renew').css('display', 'none');
            });
        }
!application-environment-list-item
    init
        {
            var block = Block('div');
            block
                .css({
                    height: '46px',
                    width: '100%',
                    marginBottom: '3px',
                })
                .on('lock', (e, b, d) => {
                    b.css('opacity', '0.8').css('pointer-events', 'none');
                })
                .on('unlock', (e, b, d) => {
                    b.css('opacity', '1').css('pointer-events', 'auto');
                })
                .on('hide_editor', (e, b, d) => {
                    b.child('block/env_key/value_editor').on('hide');
                    e.stopPropagation();
                })
                .add(Block('block', 1)
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .css({
                        height: '46px',
                        borderBottom: '1px solid #f6f6f6',
                        position: 'relative',
                        width: '100%',
                    })
                    .add(Block('block', 'env_key')
                        .__child('content')
                            .css('text-align', 'left')
                            .__parent()
                        .css({
                            fontSize: '16px',
                            letterSpacing: '0.6px',
                            paddingLeft: '10px',
                            color: '#444',
                            width: '50%',
                            height: '100%',
                            boxSizing: 'border-box',
                            display: 'inline-table',
                            verticalAlign: 'top'
                        })
                        .add(Block('text', 1)
                            .data('_')
                        )
                        .on('mouseover', (e, b, d) => {
                            if (b.child('edit_button').key('showing') == 'off')
                                b.child('edit_button').on('show');
                        })
                        .on('mouseout', (e, b, d) => {
                            if (b.child('edit_button').key('showing') == 'on')
                                b.child('edit_button').on('hide');
                        })
                        .add(Block('edit-button', 'edit_button')
                            .css({
                                marginLeft: '12px',
                                paddingTop: '4px',
                            })
                            .on('click', (e, b, d) => {
                                //b.parent(2).data('');
                                b.css('display', 'none');
                                b.sibling('text').css('display', 'none')
                                    .sibling('value_editor').css('display', 'block');
                                //console.log(b.parent(4).key('application').name);
                                b.sibling('value_editor').node().value = block.key('env_key');
                                setTimeout(_ => {
                                    b.sibling('value_editor').node().select();
                                }, 15);
                            })
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', 'env-key')
                            .css({
                                display: 'none',
                                height: '27px',
                                marginTop: '-2px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                width: '55%',
                                fontSize: '16px',
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('text').css('display', 'inline-block').sibling('edit_button').css('display', 'inline-block');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    if (value.length > 0) {
                                        block.parent().on('rename', {
                                            from: block.key('env_key'),
                                            to: value
                                        });
                                    } else {
                                        block.parent().on('remove', {
                                            key: block.key('env_key')
                                        });
                                    }
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                            })
                        )
                    )
                    .add(Block('block', 'env_val')
                        .__child('content')
                            .css('text-align', 'left')
                            .__parent()
                        .css({
                            fontSize: '16px',
                            letterSpacing: '0.6px',
                            paddingLeft: '10px',
                            color: '#444',
                            width: '50%',
                            height: '100%',
                            boxSizing: 'border-box',
                            display: 'inline-table',
                            verticalAlign: 'top'
                        })
                        .add(Block('text', 1)
                            .data('_')
                        )
                        .on('mouseover', (e, b, d) => {
                            if (b.child('edit_button').key('showing') == 'off')
                                b.child('edit_button').on('show');
                        })
                        .on('mouseout', (e, b, d) => {
                            if (b.child('edit_button').key('showing') == 'on')
                                b.child('edit_button').on('hide');
                        })
                        .add(Block('edit-button', 'edit_button')
                            .css({
                                marginLeft: '12px',
                                paddingTop: '4px',
                            })
                            .on('click', (e, b, d) => {
                                //b.parent(2).data('');
                                b.css('display', 'none');
                                b.sibling('text').css('display', 'none')
                                    .sibling('value_editor').css('display', 'block');
                                //console.log(b.parent(4).key('application').name);
                                b.sibling('value_editor').node().value = block.key('env_val');
                                setTimeout(_ => {
                                    b.sibling('value_editor').node().select();
                                }, 15);
                            })
                        )
                        .add(Block('input', 'value_editor')
                            .class('value_editor')
                            .attribute('placeholder', 'env-val')
                            .css({
                                display: 'none',
                                height: '27px',
                                marginTop: '-2px',
                                marginLeft: '-2px',
                                marginBottom: '2px',
                                width: '55%',
                                fontSize: '16px',
                            })
                            .on('hide', (e, b, d) => {
                                b.css('display', 'none').sibling('text').css('display', 'inline-block').sibling('edit_button').css('display', 'inline-block');
                                e.stopPropagation();
                            })
                            .on('keyup', (e, b, d) => {
                                if (e.keyCode == 13) {
                                    // enter
                                    var value = b.node().value;
                                    if (!value) value = '';
                                    value = (`${value}`).trim();
                                    //if (value.length > 0) {
                                        block.parent().on('update', {
                                            key: block.key('env_key'),
                                            from: block.key('env_val'),
                                            val: value,
                                        });
                                    //}
                                    setTimeout(_ => { b.on('hide'); }, 250);
                                } else if (e.keyCode == 27) {
                                    // escape
                                    b.on('hide');
                                }
                            })
                        )
                    )
                )
            ;
            return block;
        }
    load
        {
            var reserved_env_keys = ['PORT', 'PORT_SCK'];
            data('env_key', env_key => {
                block.key('env_key', env_key);
                block.child('block/env_key/text').html('').data(`${env_key}`);
                if (reserved_env_keys.includes(env_key))
                    block.on('lock');
            });
            data('env_value', env_val => {
                block.key('env_val', env_val);
                block.child('block/env_val/text').html('').data(`${env_val}`);
            });
            data('first', (first) => {
                block.key('first', first);
            });
        }